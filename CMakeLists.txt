CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(shape_drawer)
#dependency

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if(MSVC)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++latest")
endif(MSVC)

option(WITH_PNG "add png output support" OFF)

FIND_PACKAGE(any_container CONFIG REQUIRED)

INCLUDE_DIRECTORIES(${any_container_include_dirs})

if(WITH_PNG)
FIND_PACKAGE(PNG 1.2.9 REQUIRED)
INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIRS})
# external library: zlib (mandatory)

FIND_PACKAGE(ZLIB REQUIRED)
INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIRS})

FIND_PACKAGE(Freetype REQUIRED)
IF(FREETYPE_FOUND)
	INCLUDE_DIRECTORIES(${FREETYPE_INCLUDE_DIRS})
	SET(FREETYPE_FLAGS "-DUSE_FREETYPE")
ELSE(FREETYPE_FOUND)
	SET(FREETYPE_FLAGS "-DNO_FREETYPE")
	SET(FREETYPE_LIBRARIES "")
ENDIF(FREETYPE_FOUND)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${FREETYPE_FLAGS}")



# FIND_PACKAGE(miniz CONFIG REQUIRED)
# FIND_PACKAGE(tinyxml2 CONFIG REQUIRED)
endif()

SET(SHAPEDRAWER_SRC_DIR ${CMAKE_SOURCE_DIR}/src)
SET(SHAPEDRAWER_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/include)
SET(PROJECT_HEADER_DIR ${CMAKE_SOURCE_DIR}/include)
FILE(GLOB_RECURSE  SHAPEDRAWER_SRC_LISTS ${SHAPEDRAWER_SRC_DIR}/*.cpp)

SET(SHAPEDRAWER_TEST_DIR ${CMAKE_SOURCE_DIR}/test)

ADD_LIBRARY(shape_drawer ${SHAPEDRAWER_SRC_LISTS})

if(WITH_PNG)
target_link_libraries(shape_drawer ${ZLIB_LIBRARIES} ${PNG_LIBRARIES} ${FREETYPE_LIBRARIES})
target_compile_definitions(shape_drawer PUBLIC WITH_PNG_OUTPUT=1)
endif()

target_include_directories(${CMAKE_PROJECT_NAME} INTERFACE $<INSTALL_INTERFACE:include/shape_drawer>)

INCLUDE_DIRECTORIES(${SHAPEDRAWER_INCLUDE_DIR})

ADD_EXECUTABLE(shape_test  ${SHAPEDRAWER_TEST_DIR}/shape_test.cpp )
ADD_EXECUTABLE(flood_test ${SHAPEDRAWER_TEST_DIR}/flood_test.cpp)
target_link_libraries(shape_test shape_drawer)

target_link_libraries(flood_test shape_drawer)

if(WITH_PNG)
ADD_EXECUTABLE(freetype_test ${SHAPEDRAWER_TEST_DIR}/freetype_test.cpp)
target_link_libraries(freetype_test shape_drawer)
endif()




foreach(p LIB BIN INCLUDE)
	set(var CMAKE_INSTALL_${p}DIR)
	if(NOT IS_ABSOLUTE "${${var}}")
		string(TOLOWER ${p} lower_p)
        set(${var} "${CMAKE_INSTALL_PREFIX}/${lower_p}")
	endif()
endforeach()

export(TARGETS ${CMAKE_PROJECT_NAME}
      FILE ${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}Targets.cmake)

file(WRITE
    ${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}Config.cmake
    "include(\${CMAKE_CURRENT_LIST_DIR}/${CMAKE_PROJECT_NAME}Targets.cmake)\n")

install(FILES
        ${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}Config.cmake
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${CMAKE_PROJECT_NAME})

install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}Targets
    ARCHIVE  DESTINATION lib
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION bin
    )

install(DIRECTORY ${PROJECT_HEADER_DIR}/ DESTINATION include/${PROJECT_NAME})

install(EXPORT ${CMAKE_PROJECT_NAME}Targets
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${CMAKE_PROJECT_NAME})


